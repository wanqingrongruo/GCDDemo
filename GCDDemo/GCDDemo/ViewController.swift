//
//  ViewController.swift
//  GCDDemo
//
//  Created by Â©âÂçøÂÆπËã• on 2016/12/6.
//  Copyright ¬© 2016Âπ¥ Â©âÂçøÂÆπËã•. All rights reserved.
//

import UIKit

class ViewController: UIViewController {
    
    // Â≠¶‰π†Âú∞ÂùÄ:http://swift.gg/2016/11/30/grand-central-dispatch/
    
    @IBOutlet weak var imageView: UIImageView!
    
    var inactiveQueue: DispatchQueue!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        
        // syncSample()
        //asyncSample()
        //queueWithQosSyncSample()
        //queueWithQosAsyncSample()
        
        
        // conQueueSyncSample()
        // conQueueAsyncSample()
        // conQueueWithQosSyncSample()
        // conQueueWithQosAsyncSample()
        
        noAutoAction()
        if let queue = inactiveQueue {
            queue.activate()
        }
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    
}

//MARK: - ‰∏≤Ë°åÈòüÂàó  serial
extension ViewController{
    
    // ‰∏≤Ë°åÂêåÊ≠•
    func syncSample(){
        let queue = DispatchQueue(label: "com.zhengwenxiang")
        
        queue.sync {
            
            for i in 0..<10{
                print("üëç ", i)
            }
            
            print("current thread is \(Thread.current)")
        }
        
        queue.sync {
            
            for i in 20..<30{
                print("üåπ ", i)
            }
            
            print("current thread02 is \(Thread.current)")
        }
        
        for i in 100..<110{
            print("üå∂ ", i)
        }
        
        print("Main thread is \(Thread.current)")
    }
    
    // ‰∏≤Ë°åÂºÇÊ≠•
    func asyncSample(){
        let queue = DispatchQueue(label: "com.zhengwenxiang")
        
        queue.async {
            
            for i in 0..<10{
                print("üëç ", i)
            }
            
            print("current thread is \(Thread.current)")
        }
        
        queue.async {
            
            for i in 20..<30{
                print("üåπ ", i)
            }
            
            print("current thread02 is \(Thread.current)")
        }
        
        for i in 100..<110{
            print("üå∂ ", i)
        }
        print("Main thread is \(Thread.current)")
    }
    
    
    //Áî®‰∫éÊåáÂÆö‰ªªÂä°ÈáçË¶ÅÁ®ãÂ∫¶‰ª•Âèä‰ºòÂÖàÁ∫ßÁöÑ‰ø°ÊÅØÔºåÂú® GCD ‰∏≠Ë¢´Áß∞‰∏∫ Quality of ServiceÔºàQoSÔºâ
    //Â¶ÇÊûúÊ≤°ÊúâÊåáÂÆö QoSÔºåÂàôÈòüÂàó‰ºö‰ΩøÁî®ÈªòËÆ§‰ºòÂÖàÁ∫ßËøõË°åÂàùÂßãÂåñ
    /* ‰ºòÂÖàÁ∫ß‰ªé‰∏äÂà∞‰∏ã‰∏ÄÊ¨°ÈÄíÂáè -- priority
     userInteractive
     userInitiated
     default
     utility
     background
     unspecified
     */
    
    // ‰∏≤Ë°å + ‰ºòÂÖàÁ∫ß + ÂêåÊ≠•
    func queueWithQosSyncSample(){
        let queue01 = DispatchQueue(label: "com.zhengwenxiang", qos: DispatchQoS.userInitiated)
        //  let queue01 = DispatchQueue(label: "com.zhengwenxiang", qos: DispatchQoS.background)
        // let queue02 = DispatchQueue(label: "com.zhengwenxiang02", qos: DispatchQoS.userInitiated)
        let queue02 = DispatchQueue(label: "com.zhengwenxiang02", qos: DispatchQoS.utility)
        
        queue01.sync {
            for i in 0..<10{
                print("üëç ", i)
            }
            
            print("current thread00 is \(Thread.current)")
        }
        
        queue01.sync {
            for i in 100..<110{
                print("üëé ", i)
            }
            
            print("current thread02 is \(Thread.current)")
        }
        
        
        queue02.sync {
            
            for i in 200..<210{
                print("üå∂ ", i)
            }
            
            print("current thread20 is \(Thread.current)")
        }
        queue02.sync {
            
            for i in 300..<310{
                print("üêî ", i)
            }
            
            print("current thread21 is \(Thread.current)")
        }
        
        for i in 1000..<1010 {
            print("üê∑ ", i)
        }
        
        print("Main thread is \(Thread.current)")
        
    }
    
    
    // ‰∏≤Ë°å + ‰ºòÂÖàÁ∫ß + ÂºÇÊ≠•
    func queueWithQosAsyncSample(){
        let queue01 = DispatchQueue(label: "com.zhengwenxiang", qos: DispatchQoS.userInitiated)
        //  let queue01 = DispatchQueue(label: "com.zhengwenxiang", qos: DispatchQoS.background)
        // let queue02 = DispatchQueue(label: "com.zhengwenxiang02", qos: DispatchQoS.userInitiated)
        let queue02 = DispatchQueue(label: "com.zhengwenxiang02", qos: DispatchQoS.utility)
        
        queue01.async {
            for i in 0..<10{
                print("üëç ", i)
            }
            
            print("current thread00 is \(Thread.current)")
        }
        
        queue01.async {
            for i in 100..<110{
                print("üëé ", i)
            }
            
            print("current thread02 is \(Thread.current)")
        }
        
        
        queue02.async {
            
            for i in 200..<210{
                print("üå∂ ", i)
            }
            
            print("current thread20 is \(Thread.current)")
        }
        queue02.async {
            
            for i in 300..<310{
                print("üêî ", i)
            }
            
            print("current thread21 is \(Thread.current)")
        }
        
        for i in 1000..<1010 {
            print("üê∑ ", i)
        }
        
        print("Main thread is \(Thread.current)")
        
    }
    
}

//MARK: - Âπ∂Ë°åÈòüÂàó concurrent
extension ViewController{
    
    // Âπ∂Ë°åÂêåÊ≠•
    func conQueueSyncSample(){
        /*
         Ëøô‰∏™ attributes ÂèÇÊï∞‰πüÂèØ‰ª•Êé•ÂèóÂè¶‰∏Ä‰∏™Âêç‰∏∫ initiallyInactive ÁöÑÂÄº„ÄÇÂ¶ÇÊûú‰ΩøÁî®Ëøô‰∏™ÂÄºÔºå‰ªªÂä°‰∏ç‰ºöË¢´Ëá™Âä®ÊâßË°åÔºåËÄåÊòØÈúÄË¶ÅÂºÄÂèëËÄÖÊâãÂä®ÂéªËß¶Âèë„ÄÇ
         */
        let anotherQueue = DispatchQueue(label: "com.zhengwenxiang.con", qos: .utility, attributes: .concurrent)
        
        //initiallyInactiveÂ±ûÊÄßÁöÑ‰∏≤Ë°åÈòüÂàó
        //  let anotherQueue = DispatchQueue(label: "com.zhengwenxiang.con", qos: .utility, attributes: .initiallyInactive)
        
        // initiallyInactiveÂ±ûÊÄßÁöÑÂπ∂Ë°åÈòüÂàó
        //  let anotherQueue = DispatchQueue(label: "com.zhengwenxiang.con", qos: .utility, attributes: [.concurrent, .initiallyInactive])
        //  inactiveQueue = anotherQueue
        
        anotherQueue.sync {
            for i in 0..<10{
                print("üëç ", i)
            }
            
            print("current thread is \(Thread.current)")
        }
        
        anotherQueue.sync {
            for i in 100..<110{
                print("üå∂ ", i)
            }
            
            print("current thread02 is \(Thread.current)")
        }
        
        //        anotherQueue.async {
        //            for i in 1000..<1010 {
        //                print("üé© ", i)
        //            }
        //        }
        
        for i in 2000..<2010 {
            print("üê∑ ", i)
        }
        
        print("Main thread is \(Thread.current)")
    }
    
    
    
    
    // Âπ∂Ë°åÂºÇÊ≠•
    func conQueueAsyncSample(){
        //let anotherQueue = DispatchQueue(label: "com.zhengwenxiang.con", qos: .utility)
        /*
         Ëøô‰∏™ attributes ÂèÇÊï∞‰πüÂèØ‰ª•Êé•ÂèóÂè¶‰∏Ä‰∏™Âêç‰∏∫ initiallyInactive ÁöÑÂÄº„ÄÇÂ¶ÇÊûú‰ΩøÁî®Ëøô‰∏™ÂÄºÔºå‰ªªÂä°‰∏ç‰ºöË¢´Ëá™Âä®ÊâßË°åÔºåËÄåÊòØÈúÄË¶ÅÂºÄÂèëËÄÖÊâãÂä®ÂéªËß¶Âèë„ÄÇ
         */
        let anotherQueue = DispatchQueue(label: "com.zhengwenxiang.con", qos: .utility, attributes: .concurrent)
        
        
        anotherQueue.async {
            for i in 0..<10{
                print("üëç ", i)
            }
            
            print("current thread is \(Thread.current)")
        }
        
        anotherQueue.async {
            for i in 100..<110{
                print("üå∂ ", i)
            }
            
            print("current thread02 is \(Thread.current)")
        }
        
        //        anotherQueue.async {
        //            for i in 1000..<1010 {
        //                print("üé© ", i)
        //            }
        //        }
        
        for i in 2000..<2010 {
            print("üê∑ ", i)
        }
        
        print("Main thread is \(Thread.current)")
    }
    
    // Âπ∂Ë°å + ‰ºòÂÖàÁ∫ß + ÂêåÊ≠•
    func conQueueWithQosSyncSample(){
        
        let anotherQueue = DispatchQueue(label: "com.zhengwenxiang.con", qos: .userInitiated, attributes: .concurrent)
        let anotherQueue02 = DispatchQueue(label: "com.zhengwenxiang.con02", qos: .utility, attributes: .concurrent)
        
        anotherQueue.sync {
            for i in 0..<10{
                print("üëç ", i)
            }
            
            print("current thread00 is \(Thread.current)")
        }
        
        anotherQueue.sync {
            for i in 100..<110{
                print("üå∂ ", i)
            }
            
            print("current thread01 is \(Thread.current)")
        }
        
        anotherQueue02.sync {
            for i in 1000..<1010 {
                print("üé© ", i)
            }
            
            print("current thread20 is \(Thread.current)")
        }
        
        anotherQueue02.sync {
            for i in 2000..<2010 {
                print("üêî ", i)
            }
            
            print("current thread21 is \(Thread.current)")
        }
        
        
        for i in 3000..<3010 {
            print("üê∑ ", i)
        }
        
        print("Main thread is \(Thread.current)")
    }
    
    // Âπ∂Ë°å + ‰ºòÂÖàÁ∫ß + ÂºÇÊ≠•
    
    func conQueueWithQosAsyncSample(){
        
        let anotherQueue = DispatchQueue(label: "com.zhengwenxiang.con", qos: .userInitiated, attributes: .concurrent)
        let anotherQueue02 = DispatchQueue(label: "com.zhengwenxiang.con02", qos: .utility, attributes: .concurrent)
        
        anotherQueue.async {
            for i in 0..<10{
                print("üëç ", i)
            }
            
            print("current thread00 is \(Thread.current)")
        }
        
        anotherQueue.async {
            for i in 100..<110{
                print("üå∂ ", i)
            }
            
            print("current thread01 is \(Thread.current)")
        }
        
        anotherQueue02.async {
            for i in 1000..<1010 {
                print("üé© ", i)
            }
            
            print("current thread20 is \(Thread.current)")
        }
        
        anotherQueue02.async {
            for i in 2000..<2010 {
                print("üêî ", i)
            }
            
            print("current thread21 is \(Thread.current)")
        }
        
        
        for i in 3000..<3010 {
            print("üê∑ ", i)
        }
        
        print("Main thread is \(Thread.current)")
    }
    
    
}

// MARK: - ÂÖ∂‰ªñ

extension ViewController{
    
    // ÊâãÂä®ÂºÄÂêØ
    func noAutoAction(){
        
        /*
         Ëøô‰∏™ attributes ÂèÇÊï∞‰πüÂèØ‰ª•Êé•ÂèóÂè¶‰∏Ä‰∏™Âêç‰∏∫ initiallyInactive ÁöÑÂÄº„ÄÇÂ¶ÇÊûú‰ΩøÁî®Ëøô‰∏™ÂÄºÔºå‰ªªÂä°‰∏ç‰ºöË¢´Ëá™Âä®ÊâßË°åÔºåËÄåÊòØÈúÄË¶ÅÂºÄÂèëËÄÖÊâãÂä®ÂéªËß¶Âèë„ÄÇ
         */
        
        //initiallyInactiveÂ±ûÊÄßÁöÑ‰∏≤Ë°åÈòüÂàó
        //  let anotherQueue = DispatchQueue(label: "com.zhengwenxiang.con", qos: .utility, attributes: .initiallyInactive)
        
        // initiallyInactiveÂ±ûÊÄßÁöÑÂπ∂Ë°åÈòüÂàó
        let anotherQueue = DispatchQueue(label: "com.zhengwenxiang.con", qos: .utility, attributes: [.concurrent, .initiallyInactive])
        inactiveQueue = anotherQueue
        
        anotherQueue.sync {
            for i in 0..<10{
                print("üëç ", i)
            }
            
            print("current thread is \(Thread.current)")
        }
        
        anotherQueue.sync {
            for i in 100..<110{
                print("üå∂ ", i)
            }
            
            print("current thread02 is \(Thread.current)")
        }
        
        //        anotherQueue.async {
        //            for i in 1000..<1010 {
        //                print("üé© ", i)
        //            }
        //        }
        
        for i in 2000..<2010 {
            print("üê∑ ", i)
        }
        
        print("Main thread is \(Thread.current)")
        
    }
}
